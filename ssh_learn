#!/usr/bin/env python# -*- coding:utf-8 -*-
import socket
ip_port = ('127.0.0.1',9998)
sk = socket.socket()
sk.connect(ip_port)
while True:
user_input = input("cmd:").strip() 
if len(user_input) == 0:continue  
if user_input == 'q':break  
sk.send(bytes(user_input,'utf8')) 
#ack_msg = b"CMD_RESULT_SIZE|%s" % len(cmd_result)   
server_ack_msg = sk.recv(100) 
cmd_res_msg = str(server_ack_msg.decode()).split("|") 
print("server response:",cmd_res_msg) 
if cmd_res_msg[0] =="CMD_RESULT_SIZE": 
cmd_res_size = int(cmd_res_msg[1])  
sk.send(b"CLIENT_READY_TO_RECV")  
res = ''    
received_size = 0  
while received_size < cmd_res_size:  
data = sk.recv(500) 
received_size += len(data)   
res += str(data.decode())  
else:
print(str(res))     
print('-------recv done----')sk.close()



#!/usr/bin/env python# -*- coding:utf-8 -*-
import socket
import time
import subprocess 
ip_port = ('127.0.0.1',9998)
sk = socket.socket()
sk.bind(ip_port)
sk.listen(5)
while True:    
print('server waiting...')
conn,addr = sk.accept()   
while True:    
#sk.send(bytes(user_input,'utf8')) 
client_data = conn.recv(1024) 
if not client_data:break 
print("recv cmd:",str(client_data,'utf8'))
cmd = str(client_data,"utf8").strip()
cmd_call = subprocess.Popen(cmd,shell=True, stdout=subprocess.PIPE)
cmd_result = cmd_call.stdout.read()
if len(cmd_result) == 0:  
cmd_result = b"cmd execution has no output.." 
ack_msg = bytes("CMD_RESULT_SIZE|%s" %len(cmd_result) ,"utf8")
conn.send(ack_msg)   
client_ack = conn.recv(50)
if client_ack.decode() == 'CLIENT_READY_TO_RECV': 
conn.send(cmd_result )
    conn.close()
